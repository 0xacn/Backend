"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv/config");
const routes_1 = require("./routes");
const mongoose_1 = require("mongoose");
const MailUtil_1 = require("./utils/MailUtil");
const Intervals_1 = require("./utils/Intervals");
const S3Util_1 = require("./utils/S3Util");
const express_1 = __importStar(require("express"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const cors_1 = __importDefault(require("cors"));
const helmet_1 = __importDefault(require("helmet"));
const SessionMiddleware_1 = __importDefault(require("./middlewares/SessionMiddleware"));
const UserModel_1 = __importDefault(require("./models/UserModel"));
const ms_1 = __importDefault(require("ms"));
const CounterModel_1 = __importDefault(require("./models/CounterModel"));
const FileModel_1 = __importDefault(require("./models/FileModel"));
const InvisibleUrlModel_1 = __importDefault(require("./models/InvisibleUrlModel"));
const rateLimit = require("express-rate-limit");
const app = express_1.default();
const PORT = process.env.PORT || 3000;
try {
    const errors = [];
    const requiredEnvs = [
        'MONGO_URI',
        'API_KEY',
        'BACKEND_URL',
        'FRONTEND_URL',
        'S3_SECRET_KEY',
        'S3_ACCESS_KEY_ID',
        'S3_ENDPOINT',
        'S3_BUCKET',
        'CLOUDFLARE_API_KEY',
        'CLOUDFLARE_ACCOUNT_ID',
        'CLOUDFLARE_EMAIL',
        'WEBHOOK_URL',
        'CUSTOM_DOMAIN_WEBHOOK',
        'ACCESS_TOKEN_SECRET',
        'REFRESH_TOKEN_SECRET',
        'DISCORD_CLIENT_ID',
        'DISCORD_CLIENT_SECRET',
        'DISCORD_LOGIN_URL',
        'DISCORD_LINK_URL',
        'DISCORD_LOGIN_REDIRECT_URI',
        'DISCORD_LINK_REDIRECT_URI',
        'DISCORD_ROLES',
        'DISCORD_SERVER_ID',
        'DISCORD_BOT_TOKEN',
        'GMAIL_PASSWORD'
    ];
    for (const env of requiredEnvs) {
        if (!process.env.hasOwnProperty(env)) {
            errors.push(env);
        }
    }
    if (errors.length > 0)
        throw new Error(`${errors.join(', ')} ${errors.length > 1 ? 'are' : 'is'} required`);
    app.use(cors_1.default({
        credentials: true,
        origin: process.env.FRONTEND_URL,
        methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    }));
    app.set('trust proxy', 1);
    app.use(helmet_1.default.originAgentCluster());
    app.use(helmet_1.default.dnsPrefetchControl());
    app.use(helmet_1.default.permittedCrossDomainPolicies());
    app.use(helmet_1.default.hidePoweredBy());
    app.use(express_1.json());
    app.use(cookie_parser_1.default());
    app.use(SessionMiddleware_1.default);
    app.use('/', routes_1.BaseRouter);
    app.use('/files', routes_1.FilesRouter);
    app.use('/invites', routes_1.InvitesRouter);
    app.use('/domains', routes_1.DomainsRouter);
    app.use('/auth', routes_1.AuthRouter);
    app.use('/users', routes_1.UsersRouter);
    app.use('/shortener', routes_1.ShortenerRouter);
    app.use('/admin', routes_1.AdminRouter);
    app.use((_req, res) => {
        res.redirect(302, process.env.FRONTEND_URL);
    });
    app.listen(PORT, () => {
        console.log(`Listening to port ${PORT}`);
    });
    mongoose_1.connect(process.env.MONGO_URI, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        useFindAndModify: false,
    }, () => {
        console.log('Connected to MongoDB cluster');
    });
    (async () => {
        await MailUtil_1.transporter.verify();
        console.log("Mail verified");
        const findCounter = await CounterModel_1.default.findById('counter');
        if (!findCounter)
            throw new Error('Create a counter document with the value 1 as the count');
        for (const user of await UserModel_1.default.find({ 'settings.autoWipe.enabled': true })) {
            const { interval } = user.settings.autoWipe;
            const validIntervals = [ms_1.default('1h'), ms_1.default('2h'), ms_1.default('12h'), ms_1.default('24h'), ms_1.default('1w'), ms_1.default('2w'), 2147483647];
            if (validIntervals.includes(interval)) {
                const findInterval = Intervals_1.intervals.find((i) => i.uuid === user._id);
                if (findInterval)
                    clearInterval(findInterval.id);
                const id = setInterval(async () => {
                    try {
                        await S3Util_1.wipeFiles(user);
                        await FileModel_1.default.deleteMany({
                            'uploader.uuid': user._id,
                        });
                        await InvisibleUrlModel_1.default.deleteMany({
                            uploader: user._id,
                        });
                        await UserModel_1.default.findByIdAndUpdate(user._id, {
                            uploads: 0,
                        });
                    }
                    catch (err) { }
                }, interval);
                Intervals_1.intervals.push({
                    id,
                    uuid: user._id,
                });
            }
        }
        await S3Util_1.updateStorage();
        console.log("Started autowipe thread");
    })();
}
catch (err) {
    throw new Error(err);
}
//# sourceMappingURL=data:application/json;base64,