"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = exports.addPremium = exports.updateStorage = exports.wipeFiles = exports.s3 = void 0;
const aws_sdk_1 = require("aws-sdk");
const DomainModel_1 = __importDefault(require("../models/DomainModel"));
const CounterModel_1 = __importDefault(require("../models/CounterModel"));
const axios_1 = __importDefault(require("axios"));
/**
 * The aws-S3 session.
 */
// const s3 = new S3({
//     credentials: {
//         secretAccessKey: process.env.S3_SECRET_KEY,
//         accessKeyId: process.env.S3_ACCESS_KEY_ID,
//     },
//     endpoint: process.env.S3_ENDPOINT,
// });
//minio s3 lol
var s3 = new aws_sdk_1.S3({
    accessKeyId: process.env.S3_ACCESS_KEY_ID,
    secretAccessKey: process.env.S3_SECRET_KEY,
    endpoint: process.env.S3_ENDPOINT,
    s3ForcePathStyle: true,
    signatureVersion: 'v4'
});
exports.s3 = s3;
// the function below is terrible, disgusting, and long, I know, I couldn't really think of any either way to do it and I wanted to release quickly, sorry!
async function updateStorage() {
    try {
        const params = {
            Bucket: process.env.S3_BUCKET,
        };
        let storageUsed = 0;
        let objects = await s3.listObjectsV2(params).promise();
        for (const object of objects.Contents) {
            storageUsed += object.Size;
        }
        await CounterModel_1.default.findByIdAndUpdate('counter', {
            storageUsed: storageUsed,
        });
        setTimeout(async () => {
            await this.updateStorage();
        }, 300000);
    }
    catch (err) {
        new Error(err);
    }
}
exports.updateStorage = updateStorage;
async function request(endpoint, method, body, headers) {
    try {
        const baseUrl = 'https://discord.com/api/v8';
        const { data } = await axios_1.default({
            url: `${baseUrl}${endpoint}`,
            method,
            headers: headers ? headers : null,
            data: body ? body : null,
        });
        return data;
    }
    catch (err) {
        throw new Error("Couldn't link your discord. Please make sure you are not in the 100 server limit");
    }
}
exports.request = request;
async function addPremium(user) {
    await this.request(`/guilds/${process.env.DISCORD_SERVER_ID}/members/${user.discord.id}/roles/806106770212126730`, 'PUT', null, {
        'Authorization': `Bot ${process.env.DISCORD_BOT_TOKEN}`,
    });
}
exports.addPremium = addPremium;
/**
 * Wipe a user's files.
 * @param {user} user The user's files to wipe.
 * @param {string} dir The directory to delete.
 */
async function wipeFiles(user, dir = `${user._id}/`) {
    const domains = await DomainModel_1.default.find({ userOnly: true, donatedBy: user._id });
    let count = 0;
    while (true) {
        const params = {
            Bucket: process.env.S3_BUCKET,
            Prefix: dir,
        };
        if (domains.length !== 0)
            for (const domain of domains) {
                if (domain.userOnly) {
                    params.Prefix = `${domain.name}/`;
                    const domainObjects = await s3.listObjectsV2(params).promise();
                    if (domainObjects.Contents.length !== 0) {
                        const deleteParams = {
                            Bucket: process.env.S3_BUCKET,
                            Delete: {
                                Objects: [],
                            },
                        };
                        for (const { Key } of domainObjects.Contents) {
                            deleteParams.Delete.Objects.push({ Key });
                        }
                        const deleted = await s3.deleteObjects(deleteParams).promise();
                        count += deleted.Deleted.length;
                    }
                }
            }
        params.Prefix = `${user._id}/`;
        const objects = await s3.listObjectsV2(params).promise();
        if (objects.Contents.length !== 0) {
            const deleteParams = {
                Bucket: process.env.S3_BUCKET,
                Delete: {
                    Objects: [],
                },
            };
            for (const { Key } of objects.Contents) {
                deleteParams.Delete.Objects.push({ Key });
            }
            const deleted = await s3.deleteObjects(deleteParams).promise();
            count += deleted.Deleted.length;
        }
        if (!objects.IsTruncated)
            return count;
    }
}
exports.wipeFiles = wipeFiles;
//# sourceMappingURL=data:application/json;base64,