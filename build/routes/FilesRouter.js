"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const MulterUtil_1 = require("../utils/MulterUtil");
const S3Util_1 = require("../utils/S3Util");
const FormatUtil_1 = require("../utils/FormatUtil");
const GenerateUtil_1 = require("../utils/GenerateUtil");
const stream_1 = require("stream");
const UploadMiddleware_1 = __importDefault(require("../middlewares/UploadMiddleware"));
const FileModel_1 = __importDefault(require("../models/FileModel"));
const UserModel_1 = __importDefault(require("../models/UserModel"));
const InvisibleUrlModel_1 = __importDefault(require("../models/InvisibleUrlModel"));
const ValidationMiddleware_1 = __importDefault(require("../middlewares/ValidationMiddleware"));
const DeletionSchema_1 = __importDefault(require("../schemas/DeletionSchema"));
const ConfigSchema_1 = __importDefault(require("../schemas/ConfigSchema"));
const AuthMiddleware_1 = __importDefault(require("../middlewares/AuthMiddleware"));
const archiver_1 = __importDefault(require("archiver"));
const path_1 = require("path");
const CounterModel_1 = __importDefault(require("../models/CounterModel"));
const MailUtil_1 = require("../utils/MailUtil");
const AdminAuthMiddleware_1 = __importDefault(require("../middlewares/AdminAuthMiddleware"));
const rateLimit = require("express-rate-limit");
const router = express_1.Router();
const fileLimiter = rateLimit({
    windowMs: 10 * 1000,
    max: 3,
    headers: false,
});
router.get('/', AdminAuthMiddleware_1.default, async (_req, res) => {
    try {
        const total = await FileModel_1.default.countDocuments();
        const invisibleUrls = await InvisibleUrlModel_1.default.countDocuments();
        const { storageUsed } = await CounterModel_1.default.findById('counter');
        res.status(200).json({
            success: true,
            total,
            invisibleUrls,
            storageUsed: FormatUtil_1.formatFilesize(storageUsed),
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.post('/', fileLimiter, UploadMiddleware_1.default, MulterUtil_1.upload.single('file'), async (req, res) => {
    let { file, user, } = req;
    if (!file)
        return res.status(400).json({
            success: false,
            error: 'provide a file',
        });
    if ((file.size > 20971520 && !user.premium) || file.size > 104857600)
        return res.status(413).json({
            success: false,
            error: `your file is too large, your upload limit is: ${user.premium ? '100' : '20'} MB`,
        });
    const { domain, randomDomain, embed, showLink, invisibleUrl } = user.settings;
    let baseUrl = req.headers.domain ?
        req.headers.domain :
        `${domain.subdomain && domain.subdomain !== '' ? `${domain.subdomain}.` : ''}${domain.name}`;
    if (req.headers.randomdomain ? req.headers.randomdomain === 'true' : randomDomain.enabled)
        baseUrl = randomDomain.domains.length > 0 ?
            randomDomain.domains[Math.floor(Math.random() * randomDomain.domains.length)] :
            baseUrl;
    let imageUrl = `https://${baseUrl}/${file.filename}`;
    const deletionKey = GenerateUtil_1.generateString(40);
    const deletionUrl = `${process.env.BACKEND_URL}/files/delete?key=${deletionKey}`;
    const timestamp = new Date();
    file = new FileModel_1.default({
        filename: file.filename,
        key: file.key,
        timestamp,
        mimetype: file.mimetype,
        domain: baseUrl,
        userOnlyDomain: file.userOnlyDomain ? file.userOnlyDomain : false,
        size: FormatUtil_1.formatFilesize(file.size),
        deletionKey,
        embed,
        showLink,
        uploader: {
            uuid: user._id,
            username: user.username,
        },
    });
    file.embed = FormatUtil_1.formatEmbed(embed, user, file);
    await file.save();
    if (req.headers.invisibleurl ? req.headers.invisibleurl === 'true' : invisibleUrl) {
        const invisibleUrlId = GenerateUtil_1.generateInvisibleId();
        await InvisibleUrlModel_1.default.create({
            _id: invisibleUrlId,
            filename: file.filename,
            uploader: user._id,
        });
        imageUrl = `https://${baseUrl}/${invisibleUrlId}`;
    }
    await UserModel_1.default.findByIdAndUpdate(user._id, {
        $inc: {
            uploads: +1,
        },
    });
    res.status(200).json({
        success: true,
        imageUrl,
        deletionUrl,
    });
});
router.get('/delete', ValidationMiddleware_1.default(DeletionSchema_1.default, 'query'), async (req, res) => {
    const deletionKey = req.query.key;
    const file = await FileModel_1.default.findOne({ deletionKey });
    if (!file)
        return res.status(404).json({
            success: false,
            error: 'invalid deletion key',
        });
    const user = await UserModel_1.default.findById(file.uploader.uuid);
    const params = {
        Bucket: process.env.S3_BUCKET,
        Key: file.key,
    };
    try {
        await S3Util_1.s3.deleteObject(params).promise();
        if (user.uploads > 0)
            await UserModel_1.default.findByIdAndUpdate(user._id, {
                $inc: {
                    uploads: -1,
                },
            });
        await file.remove();
        res.status(200).json({
            success: true,
            message: 'deleted file successfully',
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.delete('/:id', AuthMiddleware_1.default, async (req, res) => {
    const { id } = req.params;
    const { user } = req;
    const file = await FileModel_1.default.findOne({ filename: id });
    if (!file)
        return res.status(404).json({
            success: false,
            error: 'invalid file',
        });
    if (user._id != file.uploader.uuid)
        return res.status(404).json({
            success: false,
            error: 'not your file',
        });
    const params = {
        Bucket: process.env.S3_BUCKET,
        Key: file.key,
    };
    try {
        await S3Util_1.s3.deleteObject(params).promise();
        if (user.uploads > 0)
            await UserModel_1.default.findByIdAndUpdate(user._id, {
                $inc: {
                    uploads: -1,
                },
            });
        await file.remove();
        res.status(200).json({
            success: true,
            message: 'deleted file successfully',
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.post('/wipe', AuthMiddleware_1.default, async (req, res) => {
    const { user } = req;
    try {
        const count = await S3Util_1.wipeFiles(user);
        await FileModel_1.default.deleteMany({
            'uploader.uuid': user._id,
        });
        await InvisibleUrlModel_1.default.deleteMany({
            uploader: user._id,
        });
        await UserModel_1.default.findByIdAndUpdate(user._id, {
            uploads: 0,
        });
        res.status(200).json({
            success: true,
            message: `wiped ${count} files successfully`,
            count,
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.get('/config', ValidationMiddleware_1.default(ConfigSchema_1.default, 'query'), async (req, res) => {
    const key = req.query.key;
    const user = await UserModel_1.default.findOne({ key });
    if (!user)
        return res.status(401).json({
            success: false,
            error: 'unauthorized',
        });
    const config = {
        Name: 'dny.wtf file uploader',
        DestinationType: 'ImageUploader, FileUploader',
        RequestType: 'POST',
        RequestURL: `${process.env.BACKEND_URL}/files`,
        FileFormName: 'file',
        Body: 'MultipartFormData',
        Headers: {
            key,
        },
        URL: '$json:imageUrl$',
        DeletionURL: '$json:deletionUrl$',
        ErrorMessage: '$json:error$',
    };
    res.set('Content-Disposition', 'attachment; filename=dny.wtf.sxcu');
    res.send(Buffer.from(JSON.stringify(config, null, 2), 'utf8'));
});
function writeStream(key) {
    const passThrough = new stream_1.PassThrough();
    const params = {
        Bucket: process.env.S3_BUCKET,
        Key: key,
        Body: passThrough,
        ACL: 'public-read',
    };
    return {
        passThrough,
        uploaded: S3Util_1.s3.upload(params, (err) => {
            throw new Error(err);
        }),
    };
}
router.get('/archive', AuthMiddleware_1.default, async (req, res) => {
    const { user } = req;
    if (user.uploads <= 0)
        return res.status(400).json({
            success: false,
            error: 'you haven\'t uploaded any files',
        });
    try {
        const now = Date.now();
        const difference = user.lastFileArchive && now - user.lastFileArchive.getTime();
        const duration = 43200000 - difference;
        if (user.lastFileArchive && duration > 0) {
            const hours = Math.floor(duration / 1000 / 60 / 60);
            const minutes = Math.floor((duration / 1000 / 60 / 60 - hours) * 60);
            const timeLeft = `${hours} hours and ${minutes} minutes`;
            res.status(400).json({
                success: false,
                error: `you cannot create a file archive for another ${timeLeft}`,
            });
            return;
        }
        const params = {
            Bucket: process.env.S3_BUCKET,
            Prefix: `${user._id}/`,
        };
        const objects = await S3Util_1.s3.listObjectsV2(params).promise();
        const streams = objects.Contents.map((object) => {
            return {
                stream: S3Util_1.s3.getObject({ Bucket: process.env.S3_BUCKET, Key: object.Key }).createReadStream(),
                object: object,
            };
        });
        const { passThrough, uploaded } = writeStream(`${user._id}/${GenerateUtil_1.generateString(5)}.zip`);
        await new Promise((resolve, reject) => {
            const archive = archiver_1.default('zip');
            archive.on('error', (err) => {
                throw new Error(err.message);
            });
            passThrough.on('close', resolve);
            passThrough.on('end', resolve);
            passThrough.on('error', reject);
            archive.pipe(passThrough);
            let i = 1;
            streams.forEach((ctx) => {
                if (!ctx.object.Key.endsWith('/') && path_1.extname(ctx.object.Key) !== '.zip') {
                    archive.append(ctx.stream, {
                        name: i.toString() + path_1.extname(ctx.object.Key),
                    });
                    i++;
                }
            });
            archive.finalize();
        }).catch((err) => {
            throw new Error(err);
        });
        const { Key } = await uploaded.promise();
        const Location = `${process.env.S3_ENDPOINT}/${process.env.S3_BUCKET}/${Key}`;
        await MailUtil_1.sendFileArchive(user, S3Util_1.s3.getObject({ Bucket: process.env.S3_BUCKET, Key }).createReadStream());
        await UserModel_1.default.findByIdAndUpdate(user._id, {
            lastFileArchive: new Date(),
        });
        res.status(200).json({
            success: true,
            message: 'sent archive to your email successfully',
            directLink: Location,
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
exports.default = router;
//# sourceMappingURL=data:application/json;base64,