"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const AdminMiddleware_1 = __importDefault(require("../../middlewares/AdminMiddleware"));
const AuthMiddleware_1 = __importDefault(require("../../middlewares/AuthMiddleware"));
const UserModel_1 = __importDefault(require("../../models/UserModel"));
const MeRouter_1 = __importDefault(require("./MeRouter"));
const InviteModel_1 = __importDefault(require("../../models/InviteModel"));
const AdminAuthMiddleware_1 = __importDefault(require("../../middlewares/AdminAuthMiddleware"));
const router = express_1.Router();
router.use('/@me', MeRouter_1.default);
router.get('/', AdminAuthMiddleware_1.default, async (_req, res) => {
    try {
        const total = await UserModel_1.default.countDocuments();
        const blacklisted = await UserModel_1.default.countDocuments({ 'blacklisted.status': true });
        const unusedInvites = await InviteModel_1.default.countDocuments({ 'redeemed': false });
        const premium = await UserModel_1.default.countDocuments({ 'premium': true });
        res.status(200).json({
            success: true,
            total,
            blacklisted,
            unusedInvites,
            premium,
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.get('/:id', AdminMiddleware_1.default, async (req, res) => {
    const { id } = req.params;
    const user = await UserModel_1.default.findById(id)
        .select('-__v -password');
    if (!user)
        return res.status(404).json({
            success: false,
            error: 'invalid user',
        });
    res.status(200).json({
        success: true,
        user,
    });
});
router.get('/profile/:id', AuthMiddleware_1.default, async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        const user = await UserModel_1.default.findOne({ uid: id });
        if (!user)
            return res.status(404).json({
                success: false,
                error: 'invalid user',
            });
        res.status(200).json({
            success: true,
            user: {
                uuid: user._id,
                uid: user.uid,
                username: user.username,
                registrationDate: user.registrationDate,
                role: user.blacklisted.status ? "Blacklisted" : (user.admin ? 'Admin' : (user.premium ? 'Premium' : 'Whitelisted')),
                uploads: user.uploads,
                invitedBy: user.invitedBy,
                avatar: user.discord.avatar,
            },
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
exports.default = router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL1VzZXJzUm91dGVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEscUNBQW9EO0FBQ3BELHdGQUFnRTtBQUNoRSxzRkFBOEQ7QUFDOUQsdUVBQStDO0FBQy9DLDBEQUFrQztBQUNsQywyRUFBbUQ7QUFDbkQsZ0dBQXdFO0FBQ3hFLE1BQU0sTUFBTSxHQUFHLGdCQUFNLEVBQUUsQ0FBQztBQUV4QixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxrQkFBUSxDQUFDLENBQUM7QUFFN0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsNkJBQW1CLEVBQUUsS0FBSyxFQUFFLElBQWEsRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUN4RSxJQUFJO1FBQ0EsTUFBTSxLQUFLLEdBQUcsTUFBTSxtQkFBUyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQy9DLE1BQU0sV0FBVyxHQUFHLE1BQU0sbUJBQVMsQ0FBQyxjQUFjLENBQUMsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ25GLE1BQU0sYUFBYSxHQUFHLE1BQU0scUJBQVcsQ0FBQyxjQUFjLENBQUMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM5RSxNQUFNLE9BQU8sR0FBRyxNQUFNLG1CQUFTLENBQUMsY0FBYyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFHcEUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDakIsT0FBTyxFQUFFLElBQUk7WUFDYixLQUFLO1lBQ0wsV0FBVztZQUNYLGFBQWE7WUFDYixPQUFPO1NBQ1YsQ0FBQyxDQUFDO0tBQ047SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNWLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2pCLE9BQU8sRUFBRSxLQUFLO1lBQ2QsS0FBSyxFQUFFLEdBQUcsQ0FBQyxPQUFPO1NBQ3JCLENBQUMsQ0FBQztLQUNOO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSx5QkFBZSxFQUFFLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDdEUsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFFMUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxtQkFBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7U0FDcEMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFFOUIsSUFBSSxDQUFDLElBQUk7UUFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ25DLE9BQU8sRUFBRSxLQUFLO1lBQ2QsS0FBSyxFQUFFLGNBQWM7U0FDeEIsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDakIsT0FBTyxFQUFFLElBQUk7UUFDYixJQUFJO0tBQ1AsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSx3QkFBYyxFQUFFLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDN0UsSUFBSTtRQUNBLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sSUFBSSxHQUFHLE1BQU0sbUJBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVsRCxJQUFJLENBQUMsSUFBSTtZQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ25DLE9BQU8sRUFBRSxLQUFLO2dCQUNkLEtBQUssRUFBRSxjQUFjO2FBQ3hCLENBQUMsQ0FBQztRQUVILEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2pCLE9BQU8sRUFBRSxJQUFJO1lBQ2IsSUFBSSxFQUFFO2dCQUNGLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRztnQkFDZCxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUN2QixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO2dCQUN2QyxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDbkgsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2dCQUNyQixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7Z0JBQ3pCLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU07YUFDOUI7U0FDSixDQUFDLENBQUM7S0FDTjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1YsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDakIsT0FBTyxFQUFFLEtBQUs7WUFDZCxLQUFLLEVBQUUsR0FBRyxDQUFDLE9BQU87U0FDckIsQ0FBQyxDQUFDO0tBQ047QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILGtCQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlLCBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcclxuaW1wb3J0IEFkbWluTWlkZGxld2FyZSBmcm9tICcuLi8uLi9taWRkbGV3YXJlcy9BZG1pbk1pZGRsZXdhcmUnO1xyXG5pbXBvcnQgQXV0aE1pZGRsZXdhcmUgZnJvbSAnLi4vLi4vbWlkZGxld2FyZXMvQXV0aE1pZGRsZXdhcmUnO1xyXG5pbXBvcnQgVXNlck1vZGVsIGZyb20gJy4uLy4uL21vZGVscy9Vc2VyTW9kZWwnO1xyXG5pbXBvcnQgTWVSb3V0ZXIgZnJvbSAnLi9NZVJvdXRlcic7XHJcbmltcG9ydCBJbnZpdGVNb2RlbCBmcm9tIFwiLi4vLi4vbW9kZWxzL0ludml0ZU1vZGVsXCI7XHJcbmltcG9ydCBBZG1pbkF1dGhNaWRkbGV3YXJlIGZyb20gXCIuLi8uLi9taWRkbGV3YXJlcy9BZG1pbkF1dGhNaWRkbGV3YXJlXCI7XHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpO1xyXG5cclxucm91dGVyLnVzZSgnL0BtZScsIE1lUm91dGVyKTtcclxuXHJcbnJvdXRlci5nZXQoJy8nLCBBZG1pbkF1dGhNaWRkbGV3YXJlLCBhc3luYyAoX3JlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCB0b3RhbCA9IGF3YWl0IFVzZXJNb2RlbC5jb3VudERvY3VtZW50cygpO1xyXG4gICAgICAgIGNvbnN0IGJsYWNrbGlzdGVkID0gYXdhaXQgVXNlck1vZGVsLmNvdW50RG9jdW1lbnRzKHsgJ2JsYWNrbGlzdGVkLnN0YXR1cyc6IHRydWUgfSk7XHJcbiAgICAgICAgY29uc3QgdW51c2VkSW52aXRlcyA9IGF3YWl0IEludml0ZU1vZGVsLmNvdW50RG9jdW1lbnRzKHsgJ3JlZGVlbWVkJzogZmFsc2UgfSk7XHJcbiAgICAgICAgY29uc3QgcHJlbWl1bSA9IGF3YWl0IFVzZXJNb2RlbC5jb3VudERvY3VtZW50cyh7ICdwcmVtaXVtJzogdHJ1ZSB9KTtcclxuXHJcblxyXG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcclxuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgdG90YWwsXHJcbiAgICAgICAgICAgIGJsYWNrbGlzdGVkLFxyXG4gICAgICAgICAgICB1bnVzZWRJbnZpdGVzLFxyXG4gICAgICAgICAgICBwcmVtaXVtLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xyXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3I6IGVyci5tZXNzYWdlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbnJvdXRlci5nZXQoJy86aWQnLCBBZG1pbk1pZGRsZXdhcmUsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcclxuICAgIGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XHJcblxyXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXJNb2RlbC5maW5kQnlJZChpZClcclxuICAgICAgICAuc2VsZWN0KCctX192IC1wYXNzd29yZCcpO1xyXG5cclxuICAgIGlmICghdXNlcikgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogJ2ludmFsaWQgdXNlcicsXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XHJcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICB1c2VyLFxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxucm91dGVyLmdldCgnL3Byb2ZpbGUvOmlkJywgQXV0aE1pZGRsZXdhcmUsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBwYXJzZUludChyZXEucGFyYW1zLmlkKTtcclxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlck1vZGVsLmZpbmRPbmUoeyB1aWQ6IGlkIH0pO1xyXG5cclxuICAgICAgICBpZiAoIXVzZXIpIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICBlcnJvcjogJ2ludmFsaWQgdXNlcicsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcclxuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgdXNlcjoge1xyXG4gICAgICAgICAgICAgICAgdXVpZDogdXNlci5faWQsXHJcbiAgICAgICAgICAgICAgICB1aWQ6IHVzZXIudWlkLFxyXG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXIudXNlcm5hbWUsXHJcbiAgICAgICAgICAgICAgICByZWdpc3RyYXRpb25EYXRlOiB1c2VyLnJlZ2lzdHJhdGlvbkRhdGUsXHJcbiAgICAgICAgICAgICAgICByb2xlOiB1c2VyLmJsYWNrbGlzdGVkLnN0YXR1cyA/IFwiQmxhY2tsaXN0ZWRcIiA6ICh1c2VyLmFkbWluID8gJ0FkbWluJyA6ICh1c2VyLnByZW1pdW0gPyAnUHJlbWl1bScgOiAnV2hpdGVsaXN0ZWQnKSksXHJcbiAgICAgICAgICAgICAgICB1cGxvYWRzOiB1c2VyLnVwbG9hZHMsXHJcbiAgICAgICAgICAgICAgICBpbnZpdGVkQnk6IHVzZXIuaW52aXRlZEJ5LFxyXG4gICAgICAgICAgICAgICAgYXZhdGFyOiB1c2VyLmRpc2NvcmQuYXZhdGFyLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xyXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3I6IGVyci5tZXNzYWdlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcclxuIl19