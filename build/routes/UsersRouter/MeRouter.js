"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const S3Util_1 = require("../../utils/S3Util");
const AuthMiddleware_1 = __importDefault(require("../../middlewares/AuthMiddleware"));
const ValidationMiddleware_1 = __importDefault(require("../../middlewares/ValidationMiddleware"));
const UserModel_1 = __importDefault(require("../../models/UserModel"));
const SettingsRouter_1 = __importDefault(require("./SettingsRouter"));
const FormatUtil_1 = require("../../utils/FormatUtil");
const GenerateUtil_1 = require("../../utils/GenerateUtil");
const InviteModel_1 = __importDefault(require("../../models/InviteModel"));
const RefreshTokenModel_1 = __importDefault(require("../../models/RefreshTokenModel"));
const ChangeUsernameSchema_1 = __importDefault(require("../../schemas/ChangeUsernameSchema"));
const argon2_1 = require("argon2");
const ChangePasswordSchema_1 = __importDefault(require("../../schemas/ChangePasswordSchema"));
const router = express_1.Router();
router.use(AuthMiddleware_1.default);
router.use('/settings', SettingsRouter_1.default);
router.get('/', async (req, res) => {
    const { user } = req;
    res.status(200).json(user);
});
router.get('/images', async (req, res) => {
    const { user } = req;
    try {
        const params = {
            Bucket: process.env.S3_BUCKET,
            Prefix: `${user._id}/`,
        };
        let objects = await S3Util_1.s3.listObjectsV2(params).promise();
        objects.Contents.sort((a, b) => b.LastModified.getTime() - a.LastModified.getTime());
        const images = [];
        let storageUsed = 0;
        for (const object of objects.Contents) {
            storageUsed += object.Size;
            images.push({
                link: `${process.env.S3_ENDPOINT}/${process.env.S3_BUCKET}/${user._id}/${object.Key.split('/')[1]}`,
                dateUploaded: object.LastModified,
                filename: object.Key.split('/')[1],
                size: FormatUtil_1.formatFilesize(object.Size),
            });
        }
        res.status(200).json({
            success: true,
            images,
            storageUsed: FormatUtil_1.formatFilesize(storageUsed),
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.post('/disable', async (req, res) => {
    const { user } = req;
    try {
        await UserModel_1.default.findByIdAndUpdate(user._id, {
            blacklisted: {
                status: true,
                reason: 'disabled account',
            },
        });
        await RefreshTokenModel_1.default.deleteMany({ user: user._id });
        res.clearCookie('x-refresh-token');
        res.status(200).json({
            success: true,
            message: 'disabled account successfully',
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.post('/regen_key', async (req, res) => {
    const { user } = req;
    try {
        const now = Date.now();
        const difference = user.lastKeyRegen && now - user.lastKeyRegen.getTime();
        const duration = 43200000 - difference;
        if (user.lastKeyRegen && duration > 0) {
            const hours = Math.floor(duration / 1000 / 60 / 60);
            const minutes = Math.floor((duration / 1000 / 60 / 60 - hours) * 60);
            const timeLeft = `${hours} hours and ${minutes} minutes`;
            res.status(400).json({
                success: false,
                error: `you cannot regen your key for another ${timeLeft}`,
            });
            return;
        }
        const key = `${user.username}_${GenerateUtil_1.generateString(30)}`;
        await UserModel_1.default.findByIdAndUpdate(user._id, {
            lastKeyRegen: new Date(),
            key,
        });
        res.status(200).json({
            success: true,
            key,
            message: 'regenerated key successfully',
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.get('/created_invites', async (req, res) => {
    const { user } = req;
    try {
        // eslint-disable-next-line quote-props
        const invites = await InviteModel_1.default.find({ 'createdBy.uuid': user._id, useable: true })
            .select('-__v -createdBy');
        res.status(200).json({
            success: true,
            invites,
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.put('/change_username', ValidationMiddleware_1.default(ChangeUsernameSchema_1.default), async (req, res) => {
    let { user } = req;
    const { username, password } = req.body;
    try {
        user = await UserModel_1.default.findById(user._id);
        const correctPassword = await argon2_1.verify(user.password, password);
        if (!correctPassword)
            return res.status(401).json({
                success: false,
                error: 'invalid password',
            });
        const now = Date.now();
        const difference = user.lastUsernameChange && now - user.lastUsernameChange.getTime();
        const duration = 1209600000 - difference;
        if (user.lastUsernameChange && duration > 0) {
            const hours = Math.floor(duration / 1000 / 60 / 60);
            const minutes = Math.floor((duration / 1000 / 60 / 60 - hours) * 60);
            const days = Math.floor(hours / 24);
            const timeLeft = `${days} days, ${hours} hours and ${minutes} minutes`;
            res.status(400).json({
                success: false,
                error: `you cannot change your username for another ${timeLeft}`,
            });
            return;
        }
        if (username.toLowerCase() === user.username.toLowerCase())
            return res.status(400).json({
                success: false,
                error: 'provide a new username',
            });
        const usernameTaken = await UserModel_1.default.findOne({ username: { $regex: new RegExp(username, 'i') } });
        if (usernameTaken)
            return res.status(400).json({
                success: false,
                error: 'the provided username is already taken',
            });
        await UserModel_1.default.findByIdAndUpdate(user._id, {
            username,
            lastUsernameChange: new Date(),
        });
        res.status(200).json({
            success: true,
            message: 'changed username successfully',
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.put('/change_password', ValidationMiddleware_1.default(ChangePasswordSchema_1.default), async (req, res) => {
    let { user } = req;
    const { newPassword, password } = req.body;
    try {
        user = await UserModel_1.default.findById(user._id);
        const correctPassword = await argon2_1.verify(user.password, password);
        if (!correctPassword)
            return res.status(401).json({
                success: false,
                error: 'invalid password',
            });
        if (await argon2_1.verify(user.password, newPassword))
            return res.status(400).json({
                succes: false,
                error: 'choose a new password',
            });
        const hashed = await argon2_1.hash(newPassword);
        await UserModel_1.default.findByIdAndUpdate(user._id, {
            password: hashed,
        });
        await RefreshTokenModel_1.default.deleteMany({ user: user._id });
        res.status(200).json({
            success: true,
            message: 'changed password successfully',
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
exports.default = router;
//# sourceMappingURL=data:application/json;base64,