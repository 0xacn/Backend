"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const AdminMiddleware_1 = __importDefault(require("../middlewares/AdminMiddleware"));
const AuthMiddleware_1 = __importDefault(require("../middlewares/AuthMiddleware"));
const ValidationMiddleware_1 = __importDefault(require("../middlewares/ValidationMiddleware"));
const DomainModel_1 = __importDefault(require("../models/DomainModel"));
const UserModel_1 = __importDefault(require("../models/UserModel"));
const CustomDomainSchema_1 = __importDefault(require("../schemas/CustomDomainSchema"));
const DomainSchema_1 = __importDefault(require("../schemas/DomainSchema"));
const CloudflareUtil_1 = __importDefault(require("../utils/CloudflareUtil"));
const LoggingUtil_1 = require("../utils/LoggingUtil");
const AdminAuthMiddleware_1 = __importDefault(require("../middlewares/AdminAuthMiddleware"));
const router = express_1.Router();
router.get('/', AdminAuthMiddleware_1.default, async (req, res) => {
    const { user } = req;
    try {
        const count = await DomainModel_1.default.countDocuments();
        let domains = await DomainModel_1.default.find({ userOnly: false })
            .select('-__v -_id -donatedBy').lean();
        if (user)
            domains = (await DomainModel_1.default.find({ userOnly: true, donatedBy: user._id }).select('-__v -_id -donatedBy').lean()).concat(domains);
        for (let i = 0; i < domains.length; i++) {
            const users = await UserModel_1.default.countDocuments({ 'settings.domain.name': domains[i].name });
            domains[i].users = users;
        }
        res.status(200).json({
            success: true,
            count,
            domains,
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.post('/', AdminMiddleware_1.default, ValidationMiddleware_1.default(DomainSchema_1.default), async (req, res) => {
    const { user, body } = req;
    if (body.length <= 0)
        return res.status(400).json({
            success: false,
            error: 'provide at least one domain object',
        });
    try {
        for (const field of body) {
            let { name, wildcard, donated, donatedBy, userOnly } = field;
            const domain = await DomainModel_1.default.findOne({ name });
            if (domain)
                return res.status(400).json({
                    success: false,
                    error: `${name} already exists`,
                });
            if (name.endsWith(".tk") || name.endsWith(".ml") || name.endsWith(".ga") || name.endsWith(".cf") || name.endsWith(".gq"))
                return res.status(401).json({
                    success: false,
                    error: 'dny is currently not accepting free domains',
                });
            if (name.startsWith("http"))
                return res.status(401).json({
                    success: false,
                    error: 'please enter domains in the right format',
                });
            if (user && userOnly && !donatedBy)
                donatedBy = user._id;
            await CloudflareUtil_1.default.addDomain(name, wildcard).catch((e) => console.log(e));
            await DomainModel_1.default.create({
                name,
                wildcard,
                donated: donated || false,
                donatedBy: donatedBy || null,
                userOnly: userOnly || false,
                dateAdded: new Date(),
            });
        }
        if (!(req.body.size == 1 && req.body[0].userOnly)) {
            await LoggingUtil_1.logDomains(req.body);
        }
        res.status(200).json({
            success: true,
            message: `${req.body.length > 1 ? `added ${req.body.length} domains` : 'added domain'} successfully`,
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.post('/custom', AuthMiddleware_1.default, ValidationMiddleware_1.default(CustomDomainSchema_1.default), async (req, res) => {
    const { user } = req;
    const { name, wildcard, userOnly } = req.body;
    if (!user.premium && !user.admin)
        return res.status(401).json({
            success: false,
            error: 'you do not have permission to add custom domains',
        });
    if (name.endsWith(".tk") || name.endsWith(".ml") || name.endsWith(".ga") || name.endsWith(".cf") || name.endsWith(".gq"))
        return res.status(401).json({
            success: false,
            error: 'dny is currently not accepting free domains',
        });
    if (name.startsWith("http"))
        return res.status(401).json({
            success: false,
            error: 'please enter domains in the right format',
        });
    try {
        const now = Date.now();
        const difference = user.lastDomainAddition && now - user.lastDomainAddition.getTime();
        const duration = 43200000 - difference;
        if (user.lastDomainAddition && duration > 0) {
            const hours = Math.floor(duration / 1000 / 60 / 60);
            const minutes = Math.floor((duration / 1000 / 60 / 60 - hours) * 60);
            const timeLeft = `${hours} hours and ${minutes} minutes`;
            res.status(400).json({
                success: false,
                error: `you cannot add a domain for another ${timeLeft}`,
            });
            return;
        }
        let domain = await DomainModel_1.default.findOne({ name: { $regex: new RegExp(name, 'i') } });
        if (domain)
            return res.status(400).json({
                success: false,
                error: `${name} already exists`,
            });
        await CloudflareUtil_1.default.addDomain(name, wildcard).catch((e) => console.log(e));
        domain = await DomainModel_1.default.create({
            name,
            wildcard,
            donated: true,
            donatedBy: user._id,
            userOnly: userOnly,
            dateAdded: new Date(),
        });
        await LoggingUtil_1.logCustomDomain(domain);
        await UserModel_1.default.findByIdAndUpdate(user._id, {
            lastDomainAddition: new Date(),
        });
        res.status(200).json({
            success: true,
            message: 'added domain successfully',
            domain,
        });
    }
    catch (err) {
        console.log(err.response.data);
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.delete('/:name', AdminMiddleware_1.default, async (req, res) => {
    const { name } = req.params;
    const domain = await DomainModel_1.default.findOne({ name });
    if (!domain)
        return res.status(404).json({
            success: false,
            error: 'invalid domain',
        });
    try {
        await CloudflareUtil_1.default.deleteZone(domain.name).catch((e) => console.log(e));
        await domain.remove();
        await UserModel_1.default.updateMany({ 'settings.domain.name': domain.name }, {
            'settings.domain.name': 'i.dny.wtf',
            'settings.domain.subdomain': null,
        });
        res.status(200).json({
            success: true,
            message: 'deleted domain successfully',
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.get('/list', AdminAuthMiddleware_1.default, async (_req, res) => {
    try {
        const domains = await DomainModel_1.default.find({})
            .select('-__v -_id -wildcard -donated -donatedBy -dateAdded');
        res.status(200).json(domains.map((d) => d.name).join(', '));
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.get('/rank', AdminAuthMiddleware_1.default, async (_req, res) => {
    try {
        const domains = await DomainModel_1.default.find({});
        const ranks = [];
        for (const domain of domains) {
            const users = await UserModel_1.default.countDocuments({ 'settings.domain.name': domain.name });
            ranks.push({
                domain: domain.name,
                users,
            });
        }
        const sorted = ranks.sort((a, b) => a.users - b.users).reverse();
        res.status(200).json(sorted);
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
exports.default = router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9tYWluc1JvdXRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXMvRG9tYWluc1JvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFDQUFvRDtBQUNwRCxxRkFBNkQ7QUFDN0QsbUZBQTJEO0FBQzNELCtGQUF1RTtBQUN2RSx3RUFBZ0Q7QUFDaEQsb0VBQTRDO0FBQzVDLHVGQUErRDtBQUMvRCwyRUFBbUQ7QUFDbkQsNkVBQXFEO0FBQ3JELHNEQUFtRTtBQUNuRSw2RkFBcUU7QUFDckUsTUFBTSxNQUFNLEdBQUcsZ0JBQU0sRUFBRSxDQUFDO0FBRXhCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLDZCQUFtQixFQUFFLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDdkUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztJQUNyQixJQUFJO1FBQ0EsTUFBTSxLQUFLLEdBQUcsTUFBTSxxQkFBVyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ2pELElBQUksT0FBTyxHQUFRLE1BQU0scUJBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7YUFDekQsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFM0MsSUFBSSxJQUFJO1lBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxxQkFBVyxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTVJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFF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QyxPQUFPO1NBQ3JCLENBQUMsQ0FBQztLQUNOO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQkFBZSxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCBBZG1pbk1pZGRsZXdhcmUgZnJvbSAnLi4vbWlkZGxld2FyZXMvQWRtaW5NaWRkbGV3YXJlJztcclxuaW1wb3J0IEF1dGhNaWRkbGV3YXJlIGZyb20gJy4uL21pZGRsZXdhcmVzL0F1dGhNaWRkbGV3YXJlJztcclxuaW1wb3J0IFZhbGlkYXRpb25NaWRkbGV3YXJlIGZyb20gJy4uL21pZGRsZXdhcmVzL1ZhbGlkYXRpb25NaWRkbGV3YXJlJztcclxuaW1wb3J0IERvbWFpbk1vZGVsIGZyb20gJy4uL21vZGVscy9Eb21haW5Nb2RlbCc7XHJcbmltcG9ydCBVc2VyTW9kZWwgZnJvbSAnLi4vbW9kZWxzL1VzZXJNb2RlbCc7XHJcbmltcG9ydCBDdXN0b21Eb21haW5TY2hlbWEgZnJvbSAnLi4vc2NoZW1hcy9DdXN0b21Eb21haW5TY2hlbWEnO1xyXG5pbXBvcnQgRG9tYWluU2NoZW1hIGZyb20gJy4uL3NjaGVtYXMvRG9tYWluU2NoZW1hJztcclxuaW1wb3J0IENsb3VkZmxhcmVVdGlsIGZyb20gJy4uL3V0aWxzL0Nsb3VkZmxhcmVVdGlsJztcclxuaW1wb3J0IHsgbG9nQ3VzdG9tRG9tYWluLCBsb2dEb21haW5zIH0gZnJvbSAnLi4vdXRpbHMvTG9nZ2luZ1V0aWwnO1xyXG5pbXBvcnQgQWRtaW5BdXRoTWlkZGxld2FyZSBmcm9tIFwiLi4vbWlkZGxld2FyZXMvQWRtaW5BdXRoTWlkZGxld2FyZVwiO1xyXG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIoKTtcclxuXHJcbnJvdXRlci5nZXQoJy8nLCBBZG1pbkF1dGhNaWRkbGV3YXJlLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XHJcbiAgICBjb25zdCB7IHVzZXIgfSA9IHJlcTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSBhd2FpdCBEb21haW5Nb2RlbC5jb3VudERvY3VtZW50cygpO1xyXG4gICAgICAgIGxldCBkb21haW5zOiBhbnkgPSBhd2FpdCBEb21haW5Nb2RlbC5maW5kKHsgdXNlck9ubHk6IGZhbHNlIH0pXHJcbiAgICAgICAgICAgIC5zZWxlY3QoJy1fX3YgLV9pZCAtZG9uYXRlZEJ5JykubGVhbigpO1xyXG5cclxuICAgICAgICBpZiAodXNlcikgZG9tYWlucyA9IChhd2FpdCBEb21haW5Nb2RlbC5maW5kKHsgdXNlck9ubHk6IHRydWUsIGRvbmF0ZWRCeTogdXNlci5faWQgfSkuc2VsZWN0KCctX192IC1faWQgLWRvbmF0ZWRCeScpLmxlYW4oKSkuY29uY2F0KGRvbWFpbnMpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRvbWFpbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgdXNlcnMgPSBhd2FpdCBVc2VyTW9kZWwuY291bnREb2N1bWVudHMoeyAnc2V0dGluZ3MuZG9tYWluLm5hbWUnOiBkb21haW5zW2ldLm5hbWUgfSk7XHJcblxyXG4gICAgICAgICAgICBkb21haW5zW2ldLnVzZXJzID0gdXNlcnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgIGNvdW50LFxyXG4gICAgICAgICAgICBkb21haW5zLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xyXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3I6IGVyci5tZXNzYWdlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbnJvdXRlci5wb3N0KCcvJywgQWRtaW5NaWRkbGV3YXJlLCBWYWxpZGF0aW9uTWlkZGxld2FyZShEb21haW5TY2hlbWEpLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XHJcbiAgICBjb25zdCB7IHVzZXIsIGJvZHkgfSA9IHJlcTtcclxuXHJcbiAgICBpZiAoYm9keS5sZW5ndGggPD0gMCkgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogJ3Byb3ZpZGUgYXQgbGVhc3Qgb25lIGRvbWFpbiBvYmplY3QnLFxyXG4gICAgfSk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGJvZHkpIHtcclxuICAgICAgICAgICAgbGV0IHsgbmFtZSwgd2lsZGNhcmQsIGRvbmF0ZWQsIGRvbmF0ZWRCeSwgdXNlck9ubHkgfSA9IGZpZWxkO1xyXG4gICAgICAgICAgICBjb25zdCBkb21haW4gPSBhd2FpdCBEb21haW5Nb2RlbC5maW5kT25lKHsgbmFtZSB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkb21haW4pIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGVycm9yOiBgJHtuYW1lfSBhbHJlYWR5IGV4aXN0c2AsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZihuYW1lLmVuZHNXaXRoKFwiLnRrXCIpIHx8IG5hbWUuZW5kc1dpdGgoXCIubWxcIikgfHwgbmFtZS5lbmRzV2l0aChcIi5nYVwiKSB8fCBuYW1lLmVuZHNXaXRoKFwiLmNmXCIpIHx8IG5hbWUuZW5kc1dpdGgoXCIuZ3FcIikpcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdkbnkgaXMgY3VycmVudGx5IG5vdCBhY2NlcHRpbmcgZnJlZSBkb21haW5zJyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmKG5hbWUuc3RhcnRzV2l0aChcImh0dHBcIikpcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdwbGVhc2UgZW50ZXIgZG9tYWlucyBpbiB0aGUgcmlnaHQgZm9ybWF0JyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICh1c2VyICYmIHVzZXJPbmx5ICYmICFkb25hdGVkQnkpIGRvbmF0ZWRCeSA9IHVzZXIuX2lkO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgQ2xvdWRmbGFyZVV0aWwuYWRkRG9tYWluKG5hbWUsIHdpbGRjYXJkKS5jYXRjaCgoZSkgPT4gY29uc29sZS5sb2coZSkpO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgRG9tYWluTW9kZWwuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgICAgICB3aWxkY2FyZCxcclxuICAgICAgICAgICAgICAgIGRvbmF0ZWQ6IGRvbmF0ZWQgfHwgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBkb25hdGVkQnk6IGRvbmF0ZWRCeSB8fCBudWxsLFxyXG4gICAgICAgICAgICAgICAgdXNlck9ubHk6IHVzZXJPbmx5IHx8IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZGF0ZUFkZGVkOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIShyZXEuYm9keS5zaXplID09IDEgJiYgcmVxLmJvZHlbMF0udXNlck9ubHkpKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IGxvZ0RvbWFpbnMocmVxLmJvZHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xyXG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBgJHtyZXEuYm9keS5sZW5ndGggPiAxID8gYGFkZGVkICR7cmVxLmJvZHkubGVuZ3RofSBkb21haW5zYCA6ICdhZGRlZCBkb21haW4nfSBzdWNjZXNzZnVsbHlgLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xyXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3I6IGVyci5tZXNzYWdlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbnJvdXRlci5wb3N0KCcvY3VzdG9tJywgQXV0aE1pZGRsZXdhcmUsIFZhbGlkYXRpb25NaWRkbGV3YXJlKEN1c3RvbURvbWFpblNjaGVtYSksIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcclxuICAgIGNvbnN0IHsgdXNlciB9ID0gcmVxO1xyXG4gICAgY29uc3QgeyBuYW1lLCB3aWxkY2FyZCwgdXNlck9ubHkgfSA9IHJlcS5ib2R5O1xyXG5cclxuICAgIGlmICghdXNlci5wcmVtaXVtICYmICF1c2VyLmFkbWluKSByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiAneW91IGRvIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gYWRkIGN1c3RvbSBkb21haW5zJyxcclxuICAgIH0pO1xyXG4gICAgaWYobmFtZS5lbmRzV2l0aChcIi50a1wiKSB8fCBuYW1lLmVuZHNXaXRoKFwiLm1sXCIpIHx8IG5hbWUuZW5kc1dpdGgoXCIuZ2FcIikgfHwgbmFtZS5lbmRzV2l0aChcIi5jZlwiKSB8fCBuYW1lLmVuZHNXaXRoKFwiLmdxXCIpKXJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6ICdkbnkgaXMgY3VycmVudGx5IG5vdCBhY2NlcHRpbmcgZnJlZSBkb21haW5zJyxcclxuICAgIH0pO1xyXG4gICAgaWYobmFtZS5zdGFydHNXaXRoKFwiaHR0cFwiKSlyZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiAncGxlYXNlIGVudGVyIGRvbWFpbnMgaW4gdGhlIHJpZ2h0IGZvcm1hdCcsXHJcbiAgICB9KTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgY29uc3QgZGlmZmVyZW5jZSA9IHVzZXIubGFzdERvbWFpbkFkZGl0aW9uICYmIG5vdyAtIHVzZXIubGFzdERvbWFpbkFkZGl0aW9uLmdldFRpbWUoKTtcclxuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IDQzMjAwMDAwIC0gZGlmZmVyZW5jZTtcclxuXHJcbiAgICAgICAgaWYgKHVzZXIubGFzdERvbWFpbkFkZGl0aW9uICYmIGR1cmF0aW9uID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IoZHVyYXRpb24gLyAxMDAwIC8gNjAgLyA2MCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKChkdXJhdGlvbiAvIDEwMDAgLyA2MCAvIDYwIC0gaG91cnMpICogNjApO1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lTGVmdCA9IGAke2hvdXJzfSBob3VycyBhbmQgJHttaW51dGVzfSBtaW51dGVzYDtcclxuXHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IGB5b3UgY2Fubm90IGFkZCBhIGRvbWFpbiBmb3IgYW5vdGhlciAke3RpbWVMZWZ0fWAsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGRvbWFpbjogYW55ID0gYXdhaXQgRG9tYWluTW9kZWwuZmluZE9uZSh7IG5hbWU6IHsgJHJlZ2V4OiBuZXcgUmVnRXhwKG5hbWUsICdpJykgfSB9KTtcclxuXHJcbiAgICAgICAgaWYgKGRvbWFpbikgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcclxuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgIGVycm9yOiBgJHtuYW1lfSBhbHJlYWR5IGV4aXN0c2AsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGF3YWl0IENsb3VkZmxhcmVVdGlsLmFkZERvbWFpbihuYW1lLCB3aWxkY2FyZCkuY2F0Y2goKGUpID0+IGNvbnNvbGUubG9nKGUpKTtcclxuXHJcbiAgICAgICAgZG9tYWluID0gYXdhaXQgRG9tYWluTW9kZWwuY3JlYXRlKHtcclxuICAgICAgICAgICAgbmFtZSxcclxuICAgICAgICAgICAgd2lsZGNhcmQsXHJcbiAgICAgICAgICAgIGRvbmF0ZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIGRvbmF0ZWRCeTogdXNlci5faWQsXHJcbiAgICAgICAgICAgIHVzZXJPbmx5OiB1c2VyT25seSxcclxuICAgICAgICAgICAgZGF0ZUFkZGVkOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhd2FpdCBsb2dDdXN0b21Eb21haW4oZG9tYWluKTtcclxuXHJcbiAgICAgICAgYXdhaXQgVXNlck1vZGVsLmZpbmRCeUlkQW5kVXBkYXRlKHVzZXIuX2lkLCB7XHJcbiAgICAgICAgICAgIGxhc3REb21haW5BZGRpdGlvbjogbmV3IERhdGUoKSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xyXG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiAnYWRkZWQgZG9tYWluIHN1Y2Nlc3NmdWxseScsXHJcbiAgICAgICAgICAgIGRvbWFpbixcclxuICAgICAgICB9KTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVyci5yZXNwb25zZS5kYXRhKTtcclxuICAgICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICBlcnJvcjogZXJyLm1lc3NhZ2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxucm91dGVyLmRlbGV0ZSgnLzpuYW1lJywgQWRtaW5NaWRkbGV3YXJlLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XHJcbiAgICBjb25zdCB7IG5hbWUgfSA9IHJlcS5wYXJhbXM7XHJcbiAgICBjb25zdCBkb21haW4gPSBhd2FpdCBEb21haW5Nb2RlbC5maW5kT25lKHsgbmFtZSB9KTtcclxuXHJcbiAgICBpZiAoIWRvbWFpbikgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogJ2ludmFsaWQgZG9tYWluJyxcclxuICAgIH0pO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgQ2xvdWRmbGFyZVV0aWwuZGVsZXRlWm9uZShkb21haW4ubmFtZSkuY2F0Y2goKGUpID0+IGNvbnNvbGUubG9nKGUpKTtcclxuICAgICAgICBhd2FpdCBkb21haW4ucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIGF3YWl0IFVzZXJNb2RlbC51cGRhdGVNYW55KHsgJ3NldHRpbmdzLmRvbWFpbi5uYW1lJzogZG9tYWluLm5hbWUgfSwge1xyXG4gICAgICAgICAgICAnc2V0dGluZ3MuZG9tYWluLm5hbWUnOiAnaS5kbnkud3RmJyxcclxuICAgICAgICAgICAgJ3NldHRpbmdzLmRvbWFpbi5zdWJkb21haW4nOiBudWxsLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdkZWxldGVkIGRvbWFpbiBzdWNjZXNzZnVsbHknLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xyXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3I6IGVyci5tZXNzYWdlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbnJvdXRlci5nZXQoJy9saXN0JywgQWRtaW5BdXRoTWlkZGxld2FyZSxhc3luYyAoX3JlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkb21haW5zID0gYXdhaXQgRG9tYWluTW9kZWwuZmluZCh7fSlcclxuICAgICAgICAgICAgLnNlbGVjdCgnLV9fdiAtX2lkIC13aWxkY2FyZCAtZG9uYXRlZCAtZG9uYXRlZEJ5IC1kYXRlQWRkZWQnKTtcclxuXHJcbiAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oZG9tYWlucy5tYXAoKGQpID0+IGQubmFtZSkuam9pbignLCAnKSk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICBlcnJvcjogZXJyLm1lc3NhZ2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxucm91dGVyLmdldCgnL3JhbmsnLCBBZG1pbkF1dGhNaWRkbGV3YXJlLGFzeW5jIChfcmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGRvbWFpbnMgPSBhd2FpdCBEb21haW5Nb2RlbC5maW5kKHt9KTtcclxuICAgICAgICBjb25zdCByYW5rcyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGRvbWFpbiBvZiBkb21haW5zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXJzID0gYXdhaXQgVXNlck1vZGVsLmNvdW50RG9jdW1lbnRzKHsgJ3NldHRpbmdzLmRvbWFpbi5uYW1lJzogZG9tYWluLm5hbWUgfSk7XHJcbiAgICAgICAgICAgIHJhbmtzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgZG9tYWluOiBkb21haW4ubmFtZSxcclxuICAgICAgICAgICAgICAgIHVzZXJzLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNvcnRlZCA9IHJhbmtzLnNvcnQoKGEsIGIpID0+IGEudXNlcnMgLSBiLnVzZXJzKS5yZXZlcnNlKCk7XHJcblxyXG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHNvcnRlZCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICBlcnJvcjogZXJyLm1lc3NhZ2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xyXG5cclxuIl19