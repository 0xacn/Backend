"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const argon2_1 = require("argon2");
const express_1 = require("express");
const jsonwebtoken_1 = require("jsonwebtoken");
const uuid_1 = require("uuid");
const GenerateUtil_1 = require("../../utils/GenerateUtil");
const jsonwebtoken_2 = require("jsonwebtoken");
const ValidationMiddleware_1 = __importDefault(require("../../middlewares/ValidationMiddleware"));
const InviteModel_1 = __importDefault(require("../../models/InviteModel"));
const UserModel_1 = __importDefault(require("../../models/UserModel"));
const LoginSchema_1 = __importDefault(require("../../schemas/LoginSchema"));
const RegisterSchema_1 = __importDefault(require("../../schemas/RegisterSchema"));
const VerifyEmailSchema_1 = __importDefault(require("../../schemas/VerifyEmailSchema"));
const DiscordRouter_1 = __importDefault(require("./DiscordRouter"));
const PasswordResetsRouter_1 = __importDefault(require("./PasswordResetsRouter"));
const PasswordResetModel_1 = __importDefault(require("../../models/PasswordResetModel"));
const CounterModel_1 = __importDefault(require("../../models/CounterModel"));
const RefreshTokenModel_1 = __importDefault(require("../../models/RefreshTokenModel"));
const router = express_1.Router();
async function getNextUid() {
    const { count } = await CounterModel_1.default.findByIdAndUpdate('counter', {
        $inc: {
            count: 1,
        },
    });
    return count;
}
router.use('/discord', DiscordRouter_1.default);
router.use('/password_resets', PasswordResetsRouter_1.default);
router.post('/token', async (req, res) => {
    const cookie = req.cookies['x-refresh-token'];
    if (!cookie)
        return res.status(401).json({
            success: false,
            error: 'provide a refresh token',
        });
    try {
        const refreshToken = await RefreshTokenModel_1.default.findOne({ token: cookie });
        if (!refreshToken || Date.now() >= new Date(refreshToken.expires).getTime()) {
            if (refreshToken)
                await refreshToken.remove();
            res.status(401).json({
                success: false,
                error: 'invalid refresh token',
            });
            return;
        }
        const token = jsonwebtoken_2.verify(refreshToken.token, process.env.REFRESH_TOKEN_SECRET);
        const user = await UserModel_1.default.findOne({ _id: token._id })
            .select('-__v -password');
        if (!user)
            return res.status(401).json({
                success: false,
                error: 'invalid refresh token',
            });
        await UserModel_1.default.findByIdAndUpdate(user._id, {
            lastLogin: new Date(),
        });
        const accessToken = jsonwebtoken_1.sign({ _id: user._id }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '15m' });
        res.status(200).json({
            success: true,
            accessToken,
            user,
        });
    }
    catch (err) {
        res.status(401).json({
            success: false,
            error: 'invalid refresh token',
        });
    }
});
router.post('/register', ValidationMiddleware_1.default(RegisterSchema_1.default), async (req, res) => {
    let { email, username, password, invite } = req.body;
    if (req.user)
        return res.status(400).json({
            success: false,
            error: 'you are already logged in',
        });
    const usernameTaken = await UserModel_1.default.findOne({
        username: { $regex: new RegExp(username, 'i') }
    });
    if (usernameTaken)
        return res.status(400).json({
            success: false,
            error: 'the provided username is already taken',
        });
    const emailTaken = await UserModel_1.default.findOne({ email: { $regex: new RegExp(email, 'i') } });
    if (emailTaken)
        return res.status(400).json({
            success: false,
            error: 'an account has already been registered with this email',
        });
    const inviteDoc = await InviteModel_1.default.findById(invite);
    if (!inviteDoc || !inviteDoc.useable)
        return res.status(400).json({
            success: false,
            error: 'invalid invite code',
        });
    if (inviteDoc.redeemed)
        return res.status(400).json({
            success: false,
            error: 'this invite has already been redeemed',
        });
    let invitedBy = 'Admin';
    const inviter = await UserModel_1.default.findOne({ _id: inviteDoc.createdBy.uuid });
    if (inviter) {
        invitedBy = inviter.username;
        await UserModel_1.default.findByIdAndUpdate(inviter._id, {
            $push: {
                invitedUsers: username,
            },
        });
        await InviteModel_1.default.findByIdAndUpdate(invite, {
            usedBy: username,
            redeemed: true,
            useable: false,
        });
    }
    password = await argon2_1.hash(password);
    try {
        const user = await UserModel_1.default.create({
            _id: uuid_1.v4(),
            uid: await getNextUid(),
            username,
            password,
            invite,
            key: `${username}_${GenerateUtil_1.generateString(30)}`,
            premium: false,
            lastDomainAddition: null,
            lastKeyRegen: null,
            lastUsernameChange: null,
            lastFileArchive: null,
            email,
            emailVerified: true,
            emailVerificationKey: GenerateUtil_1.generateString(30),
            discord: {
                id: null,
                avatar: null,
            },
            strikes: 0,
            blacklisted: {
                status: false,
                reason: null,
            },
            uploads: 0,
            invites: 0,
            invitedBy,
            invitedUsers: [],
            registrationDate: new Date(),
            lastLogin: null,
            testimonial: null,
            admin: false,
            notifications: [],
            settings: {
                domain: {
                    name: 'i.dny.wtf',
                    subdomain: null,
                },
                randomDomain: {
                    enabled: false,
                    domains: [],
                },
                embed: {
                    enabled: true,
                    color: '#13ed7c',
                    title: 'default',
                    description: 'default',
                    author: 'default',
                    randomColor: true,
                },
                autoWipe: {
                    enabled: false,
                    interval: 3600000,
                },
                showLink: false,
                invisibleUrl: false,
                longUrl: false,
            },
        });
        await user.save();
        res.status(200).json({
            success: true,
            message: 'registered successfully, please login',
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.post('/login', ValidationMiddleware_1.default(LoginSchema_1.default), async (req, res) => {
    const { username, password } = req.body;
    const user = await UserModel_1.default.findOne({ username });
    if (!user || !(user.password.startsWith('$') ? await argon2_1.verify(user.password, password) : false))
        return res.status(401).json({
            success: false,
            error: 'invalid username or password',
        });
    if (!user.emailVerified)
        return res.status(401).json({
            success: false,
            error: 'your email is not verified',
        });
    if (user.blacklisted.status)
        return res.status(401).json({
            success: false,
            error: `you are blacklisted for: ${user.blacklisted.reason}`,
        });
    try {
        const passwordReset = await PasswordResetModel_1.default.findOne({ user: user._id });
        if (passwordReset)
            await passwordReset.remove();
        await UserModel_1.default.findByIdAndUpdate(user._id, {
            lastLogin: new Date(),
        });
        const accessToken = jsonwebtoken_1.sign({ _id: user._id }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '15m' });
        const refreshToken = jsonwebtoken_1.sign({ _id: user._id }, process.env.REFRESH_TOKEN_SECRET);
        await RefreshTokenModel_1.default.create({
            token: refreshToken,
            user: user._id,
            expires: new Date(new Date().getTime() + 7 * 24 * 60 * 60 * 1000),
        });
        res.cookie('x-refresh-token', refreshToken, { httpOnly: true, secure: false });
        res.status(200).json({
            success: true,
            accessToken,
            user: await UserModel_1.default.findById(user._id).select('-__v -password'),
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.get('/logout', async (req, res) => {
    const cookie = req.cookies['x-refresh-token'];
    if (!cookie)
        return res.status(401).json({
            success: false,
            error: 'unauthorized',
        });
    try {
        const refreshToken = await RefreshTokenModel_1.default.findOne({ token: cookie });
        if (!refreshToken)
            return res.status(401).json({
                success: false,
                error: 'unauthorized',
            });
        await refreshToken.remove();
        res.clearCookie('x-refresh-token');
        res.status(200).json({
            success: true,
            message: 'logged out successfully',
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.get('/verify', ValidationMiddleware_1.default(VerifyEmailSchema_1.default, 'query'), async (req, res) => {
    const key = req.query.key;
    const user = await UserModel_1.default.findOne({ emailVerificationKey: key });
    if (!user)
        return res.status(404).json({
            success: false,
            error: 'invalid verification key',
        });
    if (user.emailVerified)
        return res.status(400).json({
            success: false,
            error: 'your email is already verified',
        });
    try {
        await UserModel_1.default.findByIdAndUpdate(user._id, {
            emailVerified: true,
        });
        res.status(200).json({
            success: true,
            message: 'verified email successfully',
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.post('/logout_all_devices', async (req, res) => {
});
exports.default = router;
//# sourceMappingURL=data:application/json;base64,