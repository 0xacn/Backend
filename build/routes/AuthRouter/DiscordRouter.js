"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const jsonwebtoken_1 = require("jsonwebtoken");
const OAuthMiddleware_1 = __importDefault(require("../../middlewares/OAuthMiddleware"));
const PasswordResetModel_1 = __importDefault(require("../../models/PasswordResetModel"));
const RefreshTokenModel_1 = __importDefault(require("../../models/RefreshTokenModel"));
const UserModel_1 = __importDefault(require("../../models/UserModel"));
const router = express_1.Router();
router.get('/login', (req, res) => {
    const cookie = req.cookies['x-refresh-token'];
    cookie ?
        res.redirect(`${process.env.FRONTEND_URL}/dashboard`) :
        res.redirect(process.env.DISCORD_LOGIN_URL);
});
router.get('/login/callback', OAuthMiddleware_1.default(), async (req, res) => {
    const { id, avatar, discriminator } = req.discord.user;
    try {
        const user = await UserModel_1.default.findOne({ 'discord.id': id });
        if (!user || !user.emailVerified || user.blacklisted.status)
            return res.status(401).redirect(process.env.FRONTEND_URL);
        const passwordReset = await PasswordResetModel_1.default.findOne({ user: user._id });
        if (passwordReset)
            await passwordReset.remove();
        let avatarurl;
        if (avatar && avatar.startsWith("a_")) {
            avatarurl = `https://cdn.discordapp.com/${avatar ? `avatars/${id}/${avatar}` : `embed/avatars/${discriminator % 5}`}.gif`;
        }
        else {
            avatarurl = `https://cdn.discordapp.com/${avatar ? `avatars/${id}/${avatar}` : `embed/avatars/${discriminator % 5}`}.png`;
        }
        const update = {
            'lastLogin': new Date(),
            'discord.avatar': avatarurl,
        };
        await UserModel_1.default.findByIdAndUpdate(user._id, update);
        const refreshToken = jsonwebtoken_1.sign({ _id: user._id }, process.env.REFRESH_TOKEN_SECRET);
        await RefreshTokenModel_1.default.create({
            token: refreshToken,
            user: user._id,
            expires: new Date(new Date().getTime() + 7 * 24 * 60 * 60 * 1000),
        });
        res.cookie('x-refresh-token', refreshToken, { httpOnly: true, secure: false });
        res.redirect(`${process.env.FRONTEND_URL}/dashboard`);
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.get('/link', (req, res) => {
    const cookie = req.cookies['x-refresh-token'];
    cookie ?
        res.redirect(process.env.DISCORD_LINK_URL) :
        res.status(401).json({
            success: false,
            error: 'unauthorized',
        });
});
router.get('/link/callback', OAuthMiddleware_1.default('link'), async (req, res) => {
    const cookie = req.cookies['x-refresh-token'];
    if (!cookie)
        return res.status(401).json({
            success: false,
            error: 'unauthorized',
        });
    try {
        const refreshToken = await RefreshTokenModel_1.default.findOne({ token: cookie });
        if (!refreshToken || Date.now() >= new Date(refreshToken.expires).getTime()) {
            if (refreshToken)
                await refreshToken.remove();
            res.status(401).json({
                success: false,
                error: 'invalid refresh token',
            });
            return;
        }
        const token = jsonwebtoken_1.verify(refreshToken.token, process.env.REFRESH_TOKEN_SECRET);
        const user = await UserModel_1.default.findOne({ _id: token._id })
            .select('-__v -password');
        if (!user)
            return res.status(401).json({
                success: false,
                error: 'invalid session',
            });
        if (!user.emailVerified)
            return res.status(401).json({
                success: false,
                error: 'your email is not verified',
            });
        const { id, avatar, discriminator } = req.discord.user;
        await req.discord.addGuildMember(user);
        let avatarurl;
        if (avatar && avatar.startsWith("a_")) {
            avatarurl = `https://cdn.discordapp.com/${avatar ? `avatars/${id}/${avatar}` : `embed/avatars/${discriminator % 5}`}.gif`;
        }
        else {
            avatarurl = `https://cdn.discordapp.com/${avatar ? `avatars/${id}/${avatar}` : `embed/avatars/${discriminator % 5}`}.png`;
        }
        await UserModel_1.default.findByIdAndUpdate(user._id, {
            discord: {
                id,
                avatar: avatarurl,
            },
        });
        res.status(200).redirect(`${process.env.FRONTEND_URL}/dashboard`);
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: "error: " + err.stack + err,
        });
    }
});
exports.default = router;
//# sourceMappingURL=data:application/json;base64,