"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const GenerateUtil_1 = require("../utils/GenerateUtil");
const UploadMiddleware_1 = __importDefault(require("../middlewares/UploadMiddleware"));
const ValidationMiddleware_1 = __importDefault(require("../middlewares/ValidationMiddleware"));
const ShortenerModel_1 = __importDefault(require("../models/ShortenerModel"));
const UserModel_1 = __importDefault(require("../models/UserModel"));
const ConfigSchema_1 = __importDefault(require("../schemas/ConfigSchema"));
const DeletionSchema_1 = __importDefault(require("../schemas/DeletionSchema"));
const ShortenerSchema_1 = __importDefault(require("../schemas/ShortenerSchema"));
const IPLoggers_json_1 = __importDefault(require("../utils/IPLoggers.json"));
const AuthMiddleware_1 = __importDefault(require("../middlewares/AuthMiddleware"));
const router = express_1.Router();
function isIpLogger(url) {
    for (const ipLogger of IPLoggers_json_1.default) {
        if (url.match(new RegExp(ipLogger, 'i')))
            return true;
    }
    return false;
}
router.get('/urls', AuthMiddleware_1.default, async (req, res) => {
    const { user } = req;
    try {
        const urls = await ShortenerModel_1.default.find({ user: user._id })
            .select('-_id -__v');
        res.status(200).json({
            success: true,
            urls,
            count: urls.length,
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.post('/', UploadMiddleware_1.default, ValidationMiddleware_1.default(ShortenerSchema_1.default), async (req, res) => {
    const { user } = req;
    const { url } = req.body;
    if (isIpLogger(url)) {
        if (user.strikes === 3 || user.strikes + 1 === 3) {
            await UserModel_1.default.findByIdAndUpdate(user._id, {
                blacklisted: {
                    status: true,
                    reason: 'banned by auto-mod, shortening iploggers',
                },
                strikes: 3,
            });
            res.status(400).json({
                success: false,
                error: 'you have been suspended by auto-mod, create a ticket in the server to appeal',
            });
            return;
        }
        await UserModel_1.default.findByIdAndUpdate(user._id, {
            $inc: {
                strikes: +1,
            },
        });
        res.status(400).json({
            success: false,
            error: 'ip logger detected, attempting to shorten any more ip loggers will result in a suspension',
        });
        return;
    }
    try {
        const { domain } = user.settings;
        const longUrl = req.headers.longurl ? req.headers.longurl === 'true' : user.settings.longUrl;
        const shortId = longUrl ? GenerateUtil_1.generateString(17) : GenerateUtil_1.generateString(10);
        const baseUrl = req.headers.domain ?
            req.headers.domain :
            `${domain.subdomain && domain.subdomain !== '' ? `${domain.subdomain}.` : ''}${domain.name}`;
        const deletionKey = GenerateUtil_1.generateString(40);
        const deletionUrl = `${process.env.BACKEND_URL}/shortener/delete?key=${deletionKey}`;
        const shortendUrl = `https://${baseUrl}/s/${shortId}`;
        await ShortenerModel_1.default.create({
            shortId,
            destination: url,
            deletionKey,
            timestamp: new Date(),
            user: user._id,
        });
        res.status(200).json({
            success: true,
            shortendUrl,
            deletionUrl,
            document: await ShortenerModel_1.default.findOne({ shortId }).select('-_id -__v'),
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.get('/delete', ValidationMiddleware_1.default(DeletionSchema_1.default, 'query'), async (req, res) => {
    const deletionKey = req.query.key;
    const shortened = await ShortenerModel_1.default.findOne({ deletionKey });
    if (!shortened)
        return res.status(404).json({
            success: false,
            error: 'invalid deletion key',
        });
    try {
        await shortened.remove();
        res.status(200).json({
            success: true,
            message: 'deleted url successfully',
        });
    }
    catch (err) {
        res.status(500).json({
            success: false,
            error: err.message,
        });
    }
});
router.get('/config', ValidationMiddleware_1.default(ConfigSchema_1.default, 'query'), async (req, res) => {
    const key = req.query.key;
    const user = await UserModel_1.default.findOne({ key });
    if (!user)
        return res.status(401).json({
            success: false,
            error: 'unauthorized',
        });
    const config = {
        Name: 'dny.wtf shortener',
        DestinationType: 'URLShortener',
        RequestMethod: 'POST',
        RequestURL: `${process.env.BACKEND_URL}/shortener`,
        Headers: {
            key: user.key,
        },
        Body: 'JSON',
        Data: '{"url":"$input$"}',
        URL: '$json:shortendUrl$',
        DeletionURL: '$json:deletionUrl$',
        ErrorMessage: '$json:error$',
    };
    res.set('Content-Disposition', 'attachment; filename=dnyshortener.sxcu');
    res.send(Buffer.from(JSON.stringify(config, null, 2), 'utf8'));
});
exports.default = router;
//# sourceMappingURL=data:application/json;base64,